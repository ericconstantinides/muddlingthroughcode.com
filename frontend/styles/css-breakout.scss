$root-pixels: 18px;
$site-width: 980px;
$site-padding: 1em;
$skinny-width: 700px;
$skinny-padding: 1.25em;

//---------------------------------------------------------
// parse-num: remove any units from the variable
//---------------------------------------------------------
@function parse-num($value) {
  @return $value / ($value * 0 + 1);
}

//---------------------------------------------------------
// convert-to-pixels: convert the given value to pixels
//---------------------------------------------------------
@function convert-to-pixels($value, $label) {
  @if unit($value) == "px" {
    @return $value;
  }
  @if global-variable-exists('root-pixels') {
    @if unit($value) == "rem" {
      @return $value / 1rem * $root-pixels;
    } @else if unit($value) == "em" {
      // force it to rem and return it
      @return (parse-num($value) * 1rem) / 1rem * $root-pixels;
    } @else {
      @error $label must be either em, rem, or px;
    }
  } @else {
    @error "$root-pixels must be set";
  }
}

// sanitize our variables and convert to px if necessary
$px-site-width: convert-to-pixels($site-width, '$site-width');
$px-site-padding: convert-to-pixels($site-padding, '$site-padding') * 2;
$px-site-width-with-padding: $px-site-width + $px-site-padding;
$px-skinny-width: convert-to-pixels($skinny-width, '$skinny-width');
$px-skinny-padding: convert-to-pixels($skinny-padding, '$skinny-padding') * 2;
$px-skinny-width-with-padding: $px-skinny-width + $px-skinny-padding;
$neg-site-padding: $site-padding * -1;
$neg-skinny-padding: $skinny-padding * -1;
$site-padding-2x: $site-padding * 2;
$skinny-padding-2x: $skinny-padding * 2;

.site-container {
  width: calc(100% - #{$site-padding-2x});
  max-width: $px-site-width;
  margin-left: auto;
  margin-right: auto;
}
.skinny-container {
  width: calc(100% - #{$skinny-padding-2x});
  max-width: $px-skinny-width;
  margin-left: auto;
  margin-right: auto;
}
// if you nest containers, negate out the site-container's padding:
.site-container .skinny-container {
  $new-padding: $skinny-padding-2x - $site-padding-2x;
  width: calc(100% - #{$new-padding});
}

.css-breakout--to-skinny,
.css-breakout--to-site,
.css-breakout--to-max,
.css-breakout--auto {
  max-width: none;
  width: 100vw;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// css-breakout--to-skinny
// Only "breaks out" on smaller viewports
// - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.site-container .skinny-container .css-breakout--to-skinny,
                .skinny-container .css-breakout--to-skinny,
.site-container .skinny-container .css-breakout--auto,
                .skinny-container .css-breakout--auto {
  // Skinny and up to the skinny-container
  @media only screen and (max-width: $px-skinny-width) {
    margin-left: $neg-skinny-padding;
  }
  // tweener period between where the body container loses all of its padding
  @media only screen and (min-width: $px-skinny-width + 1px) and (max-width: $px-skinny-width-with-padding) {
    width: $px-skinny-width;
    margin-left: calc(50vw - #{$px-skinny-width-with-padding} / 2);
  }
  // from the skinny-container-with-padding and larger
  @media only screen and (min-width: $px-skinny-width-with-padding + 1px) {
    width: 100%;
    margin-left: 0;
  }
}

// This could be done by forcing a block and margin-left: auto and margin-right: auto, but I don't want to force a block
.site-container .css-breakout--to-skinny {
  // Skinny and up to the skinny-container
  @media only screen and (max-width: $px-skinny-width) {
    margin-left: $neg-site-padding;
  }
  // tweener period between where the body container loses all of its padding
  @media only screen and (min-width: $px-skinny-width + 1px) and (max-width: $px-site-width-with-padding) {
    width: $px-skinny-width;
    $px-skinny-width-with-site-padding: $px-skinny-width + $px-site-padding;
    margin-left: calc(50vw - #{$px-skinny-width-with-site-padding} / 2);
  }
  // from the skinny-container-with-padding and larger
  @media only screen and (min-width: $px-site-width-with-padding + 1px) {
    width: $px-skinny-width;
    margin-left: ($px-site-width - $px-skinny-width) / 2;
  }
}
.site-container .css-breakout--to-site,
.site-container .css-breakout--auto {
  // Skinny and up to the site-width
  @media only screen and (max-width: $px-site-width) {
    margin-left: $neg-site-padding;
  }
  // tweener period between where the site-width and the site-width-with-padding
  @media only screen and (min-width: $px-site-width + 1px) and (max-width: $px-site-width-with-padding) {
    width: $px-site-width;
    margin-left: calc(50vw - #{$px-site-width-with-padding} / 2);
  }
  // from the site-container-with-padding and larger
  @media only screen and (min-width: $px-site-width-with-padding + 1px) {
    width: 100%;
    margin-left: 0;
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// css-breakout--to-site
// This always extends to the contained width of the site
// - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.skinny-container .css-breakout--to-site {
  // skinny and up to the skinny-container-with-padding
  @media only screen and (max-width: $px-skinny-width-with-padding) {
    margin-left: $neg-skinny-padding;
  }
  // tweener between the skinny-container-with-padding to the site-container
  @media only screen and (min-width: $px-skinny-width-with-padding +1px) and (max-width: $site-width) {
    margin-left: calc(-50vw + (#{$px-skinny-width} / 2));
  }
  // from the site-container and larger
  @media only screen and (min-width: $px-site-width + 1px) {
    // this is the outer one:
    width: $px-site-width;
    margin-left: (($px-site-width - $px-skinny-width) / -2);
  }
}

.site-container .css-breakout--to-max {
  // site and up to the site-width-with-padding
  @media only screen and (max-width: $px-site-width-with-padding) {
    // break out of the site-container at the same rate as the padding
    margin-left: $neg-site-padding;
  }
  // from the site-width-with-padding and larger
  @media only screen and (min-width: $px-site-width-with-padding + 1px) {
    // We start with "pulling left" exactly half the viewport.
    // From there we "add back on" half the width of the body, which puts us directly in the center
    margin-left: calc(-50vw + 50%);
  }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// css-breakout--to-max
// This always extends to the outer edge of the viewport,
// - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.skinny-container .css-breakout--to-max {
  // skinny and up to the skinny-container-with-padding
  @media only screen and (max-width: $px-skinny-width-with-padding) {
    // break out of the skinny-container at the same rate as the padding
    margin-left: $neg-skinny-padding;
  }
  // from the skinny-container-with-padding and larger
  @media only screen and (min-width: $px-skinny-width-with-padding + 1px) {
    // We start with "pulling left" exactly half the viewport.
    // From there we "add back on" half the width of the body, which puts us directly in the center
    margin-left: calc(-50vw + 50%);
  }
}